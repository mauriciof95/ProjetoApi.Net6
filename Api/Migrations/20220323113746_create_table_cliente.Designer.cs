// <auto-generated />
using System;
using Api.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20220323113746_create_table_cliente")]
    partial class create_table_cliente
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Categoria", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("data_edicao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(101);

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(1);

                    b.HasKey("id");

                    b.ToTable("categoria", "public");
                });

            modelBuilder.Entity("Models.Cliente", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnOrder(2);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("data_edicao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(101);

                    b.HasKey("id");

                    b.HasIndex("Documento")
                        .IsUnique();

                    b.ToTable("cliente", "public");
                });

            modelBuilder.Entity("Models.Perfil", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("ativo")
                        .HasColumnType("boolean")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("data_edicao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(101);

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(1);

                    b.HasKey("id");

                    b.ToTable("perfil", "public");
                });

            modelBuilder.Entity("Models.PerfilPermissao", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("data_edicao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(101);

                    b.Property<long>("perfil_id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("permissao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.HasKey("id");

                    b.HasIndex("perfil_id");

                    b.ToTable("perfil_permissao", "public");
                });

            modelBuilder.Entity("Models.Produto", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("categoria_id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("data_edicao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(101);

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(1);

                    b.HasKey("id");

                    b.HasIndex("categoria_id");

                    b.ToTable("produto", "public");
                });

            modelBuilder.Entity("Models.Usuario", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<bool>("ativo")
                        .HasColumnType("boolean")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("data_edicao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(101);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(3);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(1);

                    b.Property<long>("perfil_id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(4);

                    b.Property<string>("refresh_token")
                        .HasColumnType("text")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("refresh_token_expiry_time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(7);

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnOrder(2);

                    b.HasKey("id");

                    b.HasIndex("perfil_id");

                    b.ToTable("usuario", "public");
                });

            modelBuilder.Entity("Models.PerfilPermissao", b =>
                {
                    b.HasOne("Models.Perfil", "perfil")
                        .WithMany()
                        .HasForeignKey("perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("perfil");
                });

            modelBuilder.Entity("Models.Produto", b =>
                {
                    b.HasOne("Models.Categoria", "categoria")
                        .WithMany()
                        .HasForeignKey("categoria_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("Models.Usuario", b =>
                {
                    b.HasOne("Models.Perfil", "perfil")
                        .WithMany()
                        .HasForeignKey("perfil_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("perfil");
                });
#pragma warning restore 612, 618
        }
    }
}
